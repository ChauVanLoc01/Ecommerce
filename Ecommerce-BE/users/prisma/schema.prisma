generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  username                     String     @id @db.VarChar(100)
  password                     String     @db.VarChar(255)
  userId                       String     @db.VarChar(50)
  storeRoleId                  String?    @db.VarChar(50)
  createdBy                    String?    @db.VarChar(50)
  updatedBy                    String?    @db.VarChar(50)
  createdAt                    DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt                    DateTime?  @db.Timestamp(0)
  User_Account_userIdToUser    User       @relation("Account_userIdToUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_1")
  User_Account_createdByToUser User?      @relation("Account_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_2")
  User_Account_updatedByToUser User?      @relation("Account_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_3")
  StoreRole                    StoreRole? @relation(fields: [storeRoleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_4")

  @@index([createdBy], map: "createdBy")
  @@index([storeRoleId], map: "storeRoleId")
  @@index([updatedBy], map: "updatedBy")
  @@index([userId], map: "userId")
}

model Category {
  shortname   String    @id @db.VarChar(50)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  Product     Product[]
  Voucher     Voucher[]
}

model Order {
  id                    String              @id @db.VarChar(50)
  userId                String              @db.VarChar(50)
  storeId               String              @db.VarChar(50)
  total                 Float               @db.Float
  discount              Float?              @db.Float
  pay                   Float               @db.Float
  note                  String?             @db.VarChar(200)
  voucherId             String?             @db.VarChar(50)
  deliveryInformationId String              @db.VarChar(100)
  status                String              @db.Char(20)
  createdAt             DateTime?           @default(now()) @db.Timestamp(0)
  updatedAt             DateTime?           @db.Timestamp(0)
  User                  User                @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_ibfk_1")
  Voucher               Voucher?            @relation(fields: [voucherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_ibfk_2")
  Store                 Store               @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_ibfk_3")
  DeliveryInformation   DeliveryInformation @relation(fields: [deliveryInformationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_ibfk_4")
  Payment               Payment[]
  ProductOrder          ProductOrder[]

  @@index([userId], map: "userId")
  @@index([voucherId], map: "voucherId")
  @@index([storeId], map: "storeId")
  @@index([deliveryInformationId], map: "deliveryInformationId")
}

model Payment {
  id            String    @id @db.VarChar(50)
  orderID       String    @db.VarChar(50)
  amount        Float     @db.Float
  status        Int
  createdAt     DateTime? @default(now()) @db.Timestamp(0)
  method        Int
  transactionId String?   @db.VarChar(255)
  Order         Order     @relation(fields: [orderID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Payment_ibfk_1")

  @@index([orderID], map: "orderID")
}

model Product {
  id                           String         @id @db.VarChar(50)
  name                         String         @db.Text
  image                        String         @db.Text
  priceBefore                  Float          @db.Float
  priceAfter                   Float?         @db.Float
  initQuantity                 Int
  currentQuantity              Int
  sold                         Int            @default(0)
  description                  String?        @db.Text
  status                       String         @db.VarChar(20)
  category                     String?        @db.VarChar(50)
  createdBy                    String         @db.VarChar(50)
  updatedBy                    String?        @db.VarChar(50)
  createdAt                    DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt                    DateTime?      @db.Timestamp(0)
  deletedBy                    String?        @db.VarChar(50)
  deletedAt                    DateTime?      @db.Timestamp(0)
  storeId                      String         @db.VarChar(50)
  voucherId                    String?        @db.VarChar(50)
  rate                         Float          @default(0)
  Category                     Category?      @relation(fields: [category], references: [shortname], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_1")
  User_Product_createdByToUser User           @relation("Product_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_2")
  User_Product_updatedByToUser User?          @relation("Product_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_3")
  Store                        Store          @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_4")
  User_Product_deletedByToUser User?          @relation("Product_deletedByToUser", fields: [deletedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_5")
  Voucher                      Voucher?       @relation(fields: [voucherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_6")
  ProductOrder                 ProductOrder[]

  @@index([category], map: "category")
  @@index([createdBy], map: "createdBy")
  @@index([deletedBy], map: "deletedBy")
  @@index([storeId], map: "storeId")
  @@index([updatedBy], map: "updatedBy")
  @@index([voucherId], map: "voucherId")
}

model ProductOrder {
  id          String  @id @db.VarChar(50)
  productId   String  @db.VarChar(50)
  quantity    Int
  priceBefore Float?  @db.Float
  priceAfter  Float   @db.Float
  orderId     String  @db.VarChar(50)
  Product     Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductOrder_ibfk_1")
  Order       Order   @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductOrder_ibfk_2")

  @@index([orderId], map: "orderId")
  @@index([productId], map: "productId")
}

model Store {
  id                         String      @id @db.VarChar(50)
  name                       String      @db.VarChar(255)
  image                      String      @db.VarChar(255)
  location                   String?     @db.VarChar(100)
  description                String?     @db.VarChar(1000)
  status                     String      @db.VarChar(10)
  createdBy                  String      @db.VarChar(50)
  updatedBy                  String?     @db.VarChar(50)
  createdAt                  DateTime?   @default(now()) @db.Timestamp(0)
  updatedAt                  DateTime?   @db.Timestamp(0)
  Order                      Order[]
  Product                    Product[]
  User_Store_createdByToUser User        @relation("Store_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Store_ibfk_1")
  User_Store_updatedByToUser User?       @relation("Store_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Store_ibfk_2")
  StoreRole                  StoreRole[]
  Voucher                    Voucher[]

  @@index([createdBy], map: "createdBy")
  @@index([updatedBy], map: "updatedBy")
}

model StoreRole {
  id                             String    @id @db.VarChar(50)
  storeId                        String    @db.VarChar(50)
  status                         String    @db.VarChar(10)
  role                           String    @db.VarChar(20)
  createdBy                      String    @db.VarChar(50)
  updatedBy                      String?   @db.VarChar(50)
  createdAt                      DateTime? @default(now()) @db.Timestamp(0)
  updatedAt                      DateTime? @db.Timestamp(0)
  Account                        Account[]
  Store                          Store     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_1")
  User_StoreRole_createdByToUser User      @relation("StoreRole_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_2")
  User_StoreRole_updatedByToUser User?     @relation("StoreRole_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_3")

  @@index([createdBy], map: "createdBy")
  @@index([storeId], map: "storeId")
  @@index([updatedBy], map: "updatedBy")
}

model User {
  id                                  String                @id @db.VarChar(50)
  full_name                           String                @db.VarChar(100)
  birthday                            DateTime?             @db.Timestamp(0)
  email                               String                @db.VarChar(255)
  address                             String?               @db.Text
  rankId                              String?               @db.VarChar(50)
  role                                String                @db.VarChar(20)
  status                              String                @db.VarChar(10)
  createdAt                           DateTime?             @default(now()) @db.Timestamp(0)
  updatedAt                           DateTime?             @db.Timestamp(0)
  Account_Account_userIdToUser        Account[]             @relation("Account_userIdToUser")
  Account_Account_createdByToUser     Account[]             @relation("Account_createdByToUser")
  Account_Account_updatedByToUser     Account[]             @relation("Account_updatedByToUser")
  DeliveryInformation                 DeliveryInformation[]
  Order                               Order[]
  Product_Product_createdByToUser     Product[]             @relation("Product_createdByToUser")
  Product_Product_updatedByToUser     Product[]             @relation("Product_updatedByToUser")
  Product_Product_deletedByToUser     Product[]             @relation("Product_deletedByToUser")
  Store_Store_createdByToUser         Store[]               @relation("Store_createdByToUser")
  Store_Store_updatedByToUser         Store[]               @relation("Store_updatedByToUser")
  StoreRole_StoreRole_createdByToUser StoreRole[]           @relation("StoreRole_createdByToUser")
  StoreRole_StoreRole_updatedByToUser StoreRole[]           @relation("StoreRole_updatedByToUser")
}

model UserScore {
  userId    String    @db.VarChar(50)
  storeId   String    @db.VarChar(50)
  quantity  Int?
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)

  @@id([userId, storeId])
}

model Voucher {
  id              String    @id @db.VarChar(50)
  code            String    @db.VarChar(100)
  title           String    @db.VarChar(255)
  description     String?   @db.Text
  initQuantity    Int
  currentQuantity Int
  status          Int
  type            Int
  storeId         String    @db.VarChar(50)
  startDate       DateTime  @db.Timestamp(0)
  endDate         DateTime? @db.Timestamp(0)
  createdBy       String    @db.VarChar(50)
  createdAt       DateTime  @default(now()) @db.Timestamp(0)
  updatedBy       String?   @db.VarChar(50)
  updatedAt       DateTime? @db.Timestamp(0)
  categoryType    String?   @db.VarChar(50)
  totalOrder      Float?    @db.Float
  priceProduct    Float?    @db.Float
  Order           Order[]
  Product         Product[]
  Store           Store     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_ibfk_1")
  Category        Category? @relation(fields: [categoryType], references: [shortname], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_ibfk_2")

  @@index([storeId], map: "storeId")
  @@index([categoryType], map: "categoryType")
}

model DeliveryInformation {
  id        String    @id @db.VarChar(100)
  full_name String    @db.VarChar(100)
  phone     String    @db.VarChar(12)
  address   String    @db.VarChar(500)
  isPrimary Int?      @default(0)
  userId    String    @db.VarChar(50)
  createdAt DateTime? @db.Timestamp(0)
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "DeliveryInformation_ibfk_1")
  Order     Order[]

  @@index([userId], map: "userId")
}
