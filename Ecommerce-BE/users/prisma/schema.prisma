generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  username    String     @id @db.VarChar(100)
  password    String     @db.VarChar(255)
  userId      String     @db.VarChar(50)
  storeRoleId String?    @db.VarChar(50)
  createdBy   String?    @db.VarChar(50)
  updatedBy   String?    @db.VarChar(50)
  createdAt   DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?  @db.Timestamp(0)
  User        User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_1")
  StoreRole   StoreRole? @relation(fields: [storeRoleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_2")

  @@index([userId], map: "userId")
  @@index([storeRoleId], map: "storeRoleId")
}

model Address {
  id        String    @id @db.VarChar(50)
  userId    String    @db.VarChar(50)
  detailt   String    @db.VarChar(1000)
  district  String    @db.VarChar(100)
  city      String    @db.VarChar(100)
  isPrimary Boolean?  @default(false)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  District  District  @relation(fields: [district], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Address_ibfk_1")
  City      City      @relation(fields: [city], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Address_ibfk_2")
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Address_ibfk_3")

  @@index([city], map: "city")
  @@index([district], map: "district")
  @@index([userId], map: "userId")
}

model City {
  name    String    @id @db.VarChar(100)
  Address Address[]
  Store   Store[]
}

model District {
  name    String    @id @db.VarChar(100)
  Address Address[]
}

model Rank {
  id        String    @id @db.VarChar(50)
  point     Int?
  type      Int
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  User      User[]
}

model Store {
  id          String      @id @db.VarChar(50)
  code        Int
  name        String      @db.VarChar(255)
  image       String      @db.VarChar(255)
  location    String      @db.VarChar(100)
  description String      @db.VarChar(1000)
  status      Int
  createdBy   String      @db.VarChar(50)
  updatedBy   String?     @db.VarChar(50)
  createdAt   DateTime?   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?   @db.Timestamp(0)
  City        City        @relation(fields: [location], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Store_ibfk_1")
  StoreRole   StoreRole[]

  @@index([location], map: "location")
}

model User {
  id        String    @id @db.VarChar(50)
  code      Int
  full_name String?   @db.VarChar(100)
  birthday  DateTime? @db.Timestamp(0)
  email     String    @db.VarChar(255)
  rankId    String?   @db.VarChar(50)
  role      Int
  status    Int
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  Account   Account[]
  Address   Address[]
  Rank      Rank?     @relation(fields: [rankId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User_ibfk_1")

  @@index([rankId], map: "rankId")
}

model StoreRole {
  id        String    @id @db.VarChar(50)
  storeId   String    @db.VarChar(50)
  status    Int
  role      Int
  createdBy String    @db.VarChar(50)
  updatedBy String?   @db.VarChar(50)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  Account   Account[]
  Store     Store     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_1")

  @@index([storeId], map: "storeId")
}
model Product {
  id               String     @id @default(auto()) @map(name: "id", dbgenerated: false)
  code             String     @map(name: "code")
  name             String     @map(name: "name")
  priceBefore      Float      @map(name: "priceBefore")
  priceAfter       Float      @map(name: "priceAfter")
  initQuantity     Int        @map(name: "initQuantity")
  currentQuantity  Int        @map(name: "currentQuantity")
  description      String     @map(name: "description")
  status           Int        @map(name: "status")
  createdBy        String     @map(name: "createdBy")
  updatedBy        String?    @map(name: "updatedBy")
  createdAt        DateTime   @default(now()) @map(name: "createdAt")
  updatedAt        DateTime?  @map(name: "updatedAt")

  // Liên kết đến bảng Account cho createdBy và updatedBy
  createdByUser    Account    @relation("CreatedByUser", fields: [createdBy], references: [id])
  updatedByUser    Account?   @relation("UpdatedByUser", fields: [updatedBy], references: [id])

  // Liên kết với bảng ProductCategory
  ProductCategories ProductCategory[]
}

// Định nghĩa bảng Category
model Category {
  categoryShortname String   @id @map(name: "category_shortname")
  code              String   @map(name: "code")
  name              String   @map(name: "name")
  description       String?  @map(name: "description")
  isActive          Boolean? @default(true) @map(name: "is_active")

  // Liên kết đến bảng Account cho createdBy và updatedBy
  createdBy         Account  @relation("CategoryCreatedByUser", fields: [createdBy], references: [id])
  updatedBy         Account? @relation("CategoryUpdatedByUser", fields: [updatedBy], references: [id])

  // Liên kết với bảng ProductCategory
  ProductCategories ProductCategory[]
}

// Định nghĩa bảng ProductCategory
model ProductCategory {
  id            Int      @id @default(auto()) @map(name: "id", dbgenerated: false)
  productId     String   @map(name: "product_id")
  categoryId    String   @map(name: "category_id")
  createdBy     String   @map(name: "createdBy")
  updatedBy     String   @map(name: "updatedBy")
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @map(name: "updated_at")

  // Liên kết với bảng Product
  product       Product  @relation(fields: [productId], references: [id])

  // Liên kết với bảng Category
  category      Category @relation(fields: [categoryId], references: [categoryShortname])

  // Liên kết đến bảng Account cho createdBy và updatedBy
  createdByUser Account  @relation("ProductCategoryCreatedByUser", fields: [createdBy], references: [id])
  updatedByUser Account  @relation("ProductCategoryUpdatedByUser", fields: [updatedBy], references: [id])
}
// Định nghĩa bảng Order
model Order {
  id        String    @id @default(auto()) @map(name: "id", dbgenerated: false)
  userId    String    @map(name: "userId")
  address   String    @map(name: "address")
  total     Float     @map(name: "total")
  status    Int       @map(name: "status")
  createdAt DateTime  @default(now()) @map(name: "createdAt")
  updatedAt DateTime? @map(name: "updatedAt")

  // Liên kết với bảng User
  user      User      @relation(fields: [userId], references: [id])

  // Liên kết với bảng Address
  shippingAddress Address @relation("ShippingAddress", fields: [address], references: [id])

  // Liên kết với bảng ProductOrder
  orderItems ProductOrder[]
}

// Định nghĩa bảng ProductOrder
model ProductOrder {
  id          String   @id @default(auto()) @map(name: "id", dbgenerated: false)
  productId   String   @map(name: "productId")
  quantity    Int      @map(name: "quantity")
  priceBefore Float    @map(name: "priceBefore")
  priceAfter  Float    @map(name: "priceAfter")
  orderId     String   @map(name: "orderId")
  note        String?  @map(name: "note")

  // Liên kết với bảng Order
  order       Order    @relation(fields: [orderId], references: [id])

  // Liên kết với bảng Product
  product     Product  @relation(fields: [productId], references: [id])
}

// Định nghĩa bảng Voucher
model Voucher {
  id          String    @id @default(auto()) @map(name: "id", dbgenerated: false)
  name        String    @map(name: "name")
  description String    @map(name: "description")
  quantity    Int?      @map(name: "quantity")
  status      Int       @map(name: "status")
  type        Int       @map(name: "type")
  isDeleted   Boolean   @default(false) @map(name: "isDeleted")
  startDate   DateTime  @map(name: "startDate")
  endDate     DateTime  @map(name: "endDate")
  createdAt   DateTime  @default(now()) @map(name: "createdAt")
  updatedAt   DateTime? @map(name: "updatedAt")
}