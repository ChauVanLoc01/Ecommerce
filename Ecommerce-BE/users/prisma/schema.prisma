generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  username                     String     @id @db.VarChar(100)
  password                     String     @db.VarChar(255)
  userId                       String     @db.VarChar(50)
  storeRoleId                  String?    @db.VarChar(50)
  createdBy                    String?    @db.VarChar(50)
  updatedBy                    String?    @db.VarChar(50)
  createdAt                    DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt                    DateTime?  @db.Timestamp(0)
  User_Account_userIdToUser    User       @relation("Account_userIdToUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_1")
  User_Account_createdByToUser User?      @relation("Account_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_2")
  User_Account_updatedByToUser User?      @relation("Account_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_3")
  StoreRole                    StoreRole? @relation(fields: [storeRoleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_4")

  @@index([createdBy], map: "createdBy")
  @@index([storeRoleId], map: "storeRoleId")
  @@index([updatedBy], map: "updatedBy")
  @@index([userId], map: "userId")
}

model Address {
  id        String    @id @db.VarChar(50)
  userId    String    @db.VarChar(50)
  detailt   String    @db.VarChar(1000)
  district  String    @db.VarChar(100)
  city      String    @db.VarChar(100)
  isPrimary Boolean?  @default(false)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  District  District  @relation(fields: [district], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Address_ibfk_1")
  City      City      @relation(fields: [city], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Address_ibfk_2")
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Address_ibfk_3")
  Order     Order[]

  @@index([city], map: "city")
  @@index([district], map: "district")
  @@index([userId], map: "userId")
}

model Category {
  shortname       String            @id @db.VarChar(50)
  name            String            @db.VarChar(255)
  description     String?           @db.Text
  ProductCategory ProductCategory[] @ignore
}

model City {
  name    String    @id @db.VarChar(100)
  Address Address[]
  Store   Store[]
}

model District {
  name    String    @id @db.VarChar(100)
  Address Address[]
}

model Order {
  id           String         @id @db.VarChar(50)
  code         Int
  userId       String         @db.VarChar(50)
  address      String         @db.VarChar(50)
  total        Float          @db.Float
  discount     Float?         @db.Float
  score        Int?
  pay          Float          @db.Float
  voucherId    String?        @db.VarChar(50)
  status       Int
  createdAt    DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt    DateTime?      @db.Timestamp(0)
  Address      Address        @relation(fields: [address], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_ibfk_1")
  User         User           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_ibfk_2")
  Voucher      Voucher?       @relation(fields: [voucherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_ibfk_3")
  ProductOrder ProductOrder[]

  @@index([address], map: "address")
  @@index([userId], map: "userId")
  @@index([voucherId], map: "voucherId")
}

model Product {
  id                           String            @id @db.VarChar(50)
  code                         Int
  name                         String            @db.VarChar(100)
  priceBefore                  Float             @db.Float
  priceAfter                   Float             @db.Float
  initQuantity                 Int
  currentQuantity              Int
  description                  String            @db.Text
  status                       Int
  createdBy                    String            @db.VarChar(50)
  updatedBy                    String?           @db.VarChar(50)
  createdAt                    DateTime?         @default(now()) @db.Timestamp(0)
  updatedAt                    DateTime?         @db.Timestamp(0)
  storeId                      String            @db.VarChar(50)
  User_Product_createdByToUser User              @relation("Product_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_1")
  User_Product_updatedByToUser User?             @relation("Product_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_2")
  Store                        Store             @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_3")
  ProductCategory              ProductCategory[] @ignore
  ProductImage                 ProductImage[]
  ProductOrder                 ProductOrder[]

  @@index([createdBy], map: "createdBy")
  @@index([storeId], map: "storeId")
  @@index([updatedBy], map: "updatedBy")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ProductCategory {
  product_id                           String   @db.VarChar(50)
  category_id                          String   @db.VarChar(50)
  createdBy                            String   @db.VarChar(50)
  updatedBy                            String   @db.VarChar(50)
  Product                              Product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductCategory_ibfk_1")
  Category                             Category @relation(fields: [category_id], references: [shortname], onDelete: NoAction, onUpdate: NoAction, map: "ProductCategory_ibfk_2")
  User_ProductCategory_createdByToUser User     @relation("ProductCategory_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductCategory_ibfk_3")
  User_ProductCategory_updatedByToUser User     @relation("ProductCategory_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductCategory_ibfk_4")

  @@index([category_id], map: "category_id")
  @@index([createdBy], map: "createdBy")
  @@index([product_id], map: "product_id")
  @@index([updatedBy], map: "updatedBy")
  @@ignore
}

model ProductImage {
  id        String    @id @db.VarChar(50)
  url       String    @db.VarChar(255)
  status    Int
  createdBy String    @db.VarChar(50)
  updatedBy String?   @db.VarChar(50)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  productId String    @db.VarChar(50)
  Product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductImage_ibfk_1")

  @@index([productId], map: "productId")
}

model ProductOrder {
  id          String  @id @db.VarChar(50)
  productId   String  @db.VarChar(50)
  quantity    Int
  priceBefore Float   @db.Float
  priceAfter  Float?  @db.Float
  orderId     String  @db.VarChar(50)
  note        String? @db.VarChar(255)
  Product     Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductOrder_ibfk_1")
  Order       Order   @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductOrder_ibfk_2")

  @@index([orderId], map: "orderId")
  @@index([productId], map: "productId")
}

model Rank {
  id        String    @id @db.VarChar(50)
  point     Int?
  type      Int
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  User      User[]
}

model Store {
  id          String      @id @db.VarChar(50)
  code        Int
  name        String      @db.VarChar(255)
  image       String      @db.VarChar(255)
  location    String      @db.VarChar(100)
  description String      @db.VarChar(1000)
  status      Int
  createdBy   String      @db.VarChar(50)
  updatedBy   String?     @db.VarChar(50)
  createdAt   DateTime?   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?   @db.Timestamp(0)
  Product     Product[]
  City        City        @relation(fields: [location], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Store_ibfk_1")
  StoreRole   StoreRole[]
  Voucher     Voucher[]

  @@index([location], map: "location")
}

model StoreRole {
  id                             String    @id @db.VarChar(50)
  storeId                        String    @db.VarChar(50)
  status                         Int
  role                           Int
  createdBy                      String    @db.VarChar(50)
  updatedBy                      String?   @db.VarChar(50)
  createdAt                      DateTime? @default(now()) @db.Timestamp(0)
  updatedAt                      DateTime? @db.Timestamp(0)
  Account                        Account[]
  Store                          Store     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_1")
  User_StoreRole_createdByToUser User      @relation("StoreRole_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_2")
  User_StoreRole_updatedByToUser User?     @relation("StoreRole_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_3")

  @@index([createdBy], map: "createdBy")
  @@index([storeId], map: "storeId")
  @@index([updatedBy], map: "updatedBy")
}

model User {
  id                                              String            @id @db.VarChar(50)
  code                                            Int
  full_name                                       String            @db.VarChar(100)
  birthday                                        DateTime?         @db.Timestamp(0)
  email                                           String            @db.VarChar(255)
  rankId                                          String?           @db.VarChar(50)
  role                                            Int
  status                                          Int
  createdAt                                       DateTime?         @default(now()) @db.Timestamp(0)
  updatedAt                                       DateTime?         @db.Timestamp(0)
  Account_Account_userIdToUser                    Account[]         @relation("Account_userIdToUser")
  Account_Account_createdByToUser                 Account[]         @relation("Account_createdByToUser")
  Account_Account_updatedByToUser                 Account[]         @relation("Account_updatedByToUser")
  Address                                         Address[]
  Order                                           Order[]
  Product_Product_createdByToUser                 Product[]         @relation("Product_createdByToUser")
  Product_Product_updatedByToUser                 Product[]         @relation("Product_updatedByToUser")
  ProductCategory_ProductCategory_createdByToUser ProductCategory[] @relation("ProductCategory_createdByToUser") @ignore
  ProductCategory_ProductCategory_updatedByToUser ProductCategory[] @relation("ProductCategory_updatedByToUser") @ignore
  StoreRole_StoreRole_createdByToUser             StoreRole[]       @relation("StoreRole_createdByToUser")
  StoreRole_StoreRole_updatedByToUser             StoreRole[]       @relation("StoreRole_updatedByToUser")
  Rank                                            Rank?             @relation(fields: [rankId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User_ibfk_1")

  @@index([rankId], map: "rankId")
}

model UserScore {
  userId    String    @db.VarChar(50)
  storeId   String    @db.VarChar(50)
  quantity  Int?
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)

  @@id([userId, storeId])
}

model Voucher {
  id              String    @id @db.VarChar(50)
  code            Int
  name            String    @db.VarChar(255)
  description     String    @db.Text
  initQuantity    Int
  currentQuantity Int
  status          Int
  type            Int
  storeId         String    @db.VarChar(50)
  startDate       DateTime  @db.Timestamp(0)
  endDate         DateTime  @db.Timestamp(0)
  createdAt       DateTime? @default(now()) @db.Timestamp(0)
  updatedAt       DateTime? @db.Timestamp(0)
  Order           Order[]
  Store           Store     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_ibfk_1")

  @@index([storeId], map: "storeId")
}
