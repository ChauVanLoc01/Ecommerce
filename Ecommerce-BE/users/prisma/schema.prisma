generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  username                     String     @id @db.VarChar(100)
  password                     String     @db.VarChar(255)
  userId                       String     @db.VarChar(50)
  storeRoleId                  String?    @db.VarChar(50)
  createdBy                    String?    @db.VarChar(50)
  updatedBy                    String?    @db.VarChar(50)
  createdAt                    DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt                    DateTime?  @db.Timestamp(0)
  User_Account_userIdToUser    User       @relation("Account_userIdToUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_1")
  User_Account_createdByToUser User?      @relation("Account_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_2")
  User_Account_updatedByToUser User?      @relation("Account_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_3")
  StoreRole                    StoreRole? @relation(fields: [storeRoleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_4")

  @@index([createdBy], map: "createdBy")
  @@index([storeRoleId], map: "storeRoleId")
  @@index([updatedBy], map: "updatedBy")
  @@index([userId], map: "userId")
}

model Category {
  shortname                String                     @id @db.VarChar(50)
  name                     String                     @db.VarChar(255)
  description              String?                    @db.Text
  CategoryConditionVoucher CategoryConditionVoucher[]
  Product                  Product[]
}

model CategoryConditionVoucher {
  id                String    @id @db.VarChar(50)
  categoryShortName String    @db.VarChar(50)
  createdAt         DateTime  @db.Timestamp(0)
  createdBy         String    @db.VarChar(50)
  updatedAt         DateTime? @db.Timestamp(0)
  updatedBy         String?   @db.VarChar(50)
  User              User      @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "CategoryConditionVoucher_ibfk_2")
  Category          Category  @relation(fields: [categoryShortName], references: [shortname], onDelete: NoAction, onUpdate: NoAction, map: "CategoryConditionVoucher_ibfk_3")
  Voucher           Voucher[]

  @@index([categoryShortName], map: "categoryShortName")
  @@index([createdBy], map: "createdBy")
}

model DeliveryInformation {
  id        String    @id @db.VarChar(100)
  full_name String    @db.VarChar(100)
  phone     String    @db.VarChar(12)
  address   String    @db.VarChar(500)
  isPrimary Boolean   @default(false)
  userId    String    @db.VarChar(50)
  createdAt DateTime? @db.Timestamp(0)
  isDelete  Boolean   @default(false)
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "DeliveryInformation_ibfk_1")

  @@index([userId], map: "userId")
}

model Order {
  id             String          @id @db.VarChar(50)
  userId         String          @db.VarChar(50)
  storeId        String          @db.VarChar(50)
  total          Float           @db.Float
  discount       Float?          @db.Float
  pay            Float           @db.Float
  note           String?         @db.VarChar(200)
  isRated        Boolean?        @default(false)
  status         String          @db.Char(50)
  createdAt      DateTime?       @default(now()) @db.Timestamp(0)
  updatedAt      DateTime?       @db.Timestamp(0)
  numberOfRefund Int?            @default(3)
  isDraf         Boolean?        @default(true)
  User           User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_ibfk_1")
  Store          Store           @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_ibfk_3")
  OrderFlow      OrderFlow[]
  OrderRefund    OrderRefund[]
  OrderShipping  OrderShipping[]
  OrderVoucher   OrderVoucher[]
  Payment        Payment[]
  ProductOrder   ProductOrder[]
  Rating         Rating[]

  @@index([storeId], map: "storeId")
  @@index([userId], map: "userId")
}

model OrderFlow {
  id            String    @id @db.VarChar(50)
  status        String    @db.VarChar(50)
  note          String?   @db.Text
  createdBy     String    @db.VarChar(50)
  createdAt     DateTime? @db.Timestamp(0)
  orderId       String    @db.VarChar(50)
  orderRefundId String?   @db.VarChar(50)
  Order         Order     @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "OrderFlow_ibfk_2")

  @@index([createdBy], map: "createdBy")
  @@index([orderId], map: "orderId")
}

model Payment {
  id            String    @id @db.VarChar(50)
  orderID       String    @db.VarChar(50)
  amount        Float     @db.Float
  status        Int
  createdAt     DateTime? @default(now()) @db.Timestamp(0)
  method        Int
  transactionId String?   @db.VarChar(255)
  Order         Order     @relation(fields: [orderID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Payment_ibfk_1")

  @@index([orderID], map: "orderID")
}

model PriceConditionVoucher {
  id        String    @id @db.VarChar(50)
  totalMin  Float?    @db.Float
  totalMax  Float?    @db.Float
  priceMin  Float?    @db.Float
  priceMax  Float?    @db.Float
  createdAt DateTime  @db.Timestamp(0)
  createdBy String    @db.VarChar(50)
  updatedAt DateTime? @db.Timestamp(0)
  updatedBy String?   @db.VarChar(50)
  User      User      @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "PriceConditionVoucher_ibfk_1")
  Voucher   Voucher[]

  @@index([createdBy], map: "createdBy")
}

model Product {
  id                           String                 @id @db.VarChar(50)
  name                         String                 @db.Text
  image                        String                 @db.Text
  priceBefore                  Float                  @db.Float
  priceAfter                   Float?                 @db.Float
  initQuantity                 Int
  currentQuantity              Int
  sold                         Int                    @default(0)
  description                  String?                @db.Text
  status                       String                 @db.VarChar(20)
  category                     String?                @db.VarChar(50)
  createdBy                    String                 @db.VarChar(50)
  updatedBy                    String?                @db.VarChar(50)
  createdAt                    DateTime?              @default(now()) @db.Timestamp(0)
  updatedAt                    DateTime?              @db.Timestamp(0)
  deletedBy                    String?                @db.VarChar(50)
  deletedAt                    DateTime?              @db.Timestamp(0)
  storeId                      String                 @db.VarChar(50)
  voucherId                    String?                @db.VarChar(50)
  rate                         Float                  @default(0)
  isDelete                     Boolean?               @default(false)
  Category                     Category?              @relation(fields: [category], references: [shortname], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_1")
  User_Product_createdByToUser User                   @relation("Product_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_2")
  User_Product_updatedByToUser User?                  @relation("Product_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_3")
  Store                        Store                  @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_4")
  User_Product_deletedByToUser User?                  @relation("Product_deletedByToUser", fields: [deletedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_5")
  Voucher                      Voucher?               @relation(fields: [voucherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ibfk_6")
  ProductImage                 ProductImage[]
  ProductOrder                 ProductOrder[]
  ProductPromotion             ProductPromotion[]
  UserAddProductToCart         UserAddProductToCart[]
  UserViewProduct              UserViewProduct[]

  @@index([category], map: "category")
  @@index([createdBy], map: "createdBy")
  @@index([deletedBy], map: "deletedBy")
  @@index([storeId], map: "storeId")
  @@index([updatedBy], map: "updatedBy")
  @@index([voucherId], map: "voucherId")
}

model ProductImage {
  id        String    @id @db.VarChar(50)
  productId String    @db.VarChar(50)
  url       String    @db.TinyText
  createdBy String    @db.VarChar(50)
  createdAt DateTime? @db.Timestamp(0)
  User      User      @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductImage_ibfk_1")
  Product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductImage_ibfk_2")

  @@index([createdBy], map: "createdBy")
  @@index([productId], map: "productId")
}

model ProductOrder {
  id                 String               @id @db.VarChar(50)
  productId          String               @db.VarChar(50)
  quantity           Int
  priceBefore        Float?               @db.Float
  priceAfter         Float                @db.Float
  orderId            String               @db.VarChar(50)
  Product            Product              @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductOrder_ibfk_1")
  Order              Order                @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductOrder_ibfk_2")
  ProductOrderRefund ProductOrderRefund[]

  @@index([orderId], map: "orderId")
  @@index([productId], map: "productId")
}

model Rating {
  id          String        @id @db.VarChar(50)
  storeId     String        @db.VarChar(50)
  orderId     String        @db.VarChar(50)
  stars       Float
  comment     String        @db.Text
  isReply     Boolean?      @default(false)
  createdBy   String        @db.VarChar(50)
  createdAt   DateTime      @db.Timestamp(0)
  updatedBy   String?       @db.VarChar(50)
  updatedAt   DateTime?     @db.Timestamp(0)
  User        User          @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Rating_ibfk_1")
  Order       Order         @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Rating_ibfk_3")
  Store       Store         @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Rating_ibfk_4")
  RatingReply RatingReply[]

  @@index([createdBy], map: "createdBy")
  @@index([orderId], map: "orderId")
  @@index([storeId], map: "storeId")
}

model RatingMaterial {
  id            String   @id @db.VarChar(50)
  url           String   @db.TinyText
  isPrimary     Boolean? @default(false)
  ratingId      String?  @db.VarChar(50)
  ratingReplyId String?  @db.VarChar(50)

  @@index([ratingId], map: "ratingId")
}

model RatingReply {
  id             String    @id @db.VarChar(50)
  parentRatingId String    @db.VarChar(50)
  detail         String    @db.Text
  createdAt      DateTime  @db.Timestamp(0)
  createdBy      String    @db.VarChar(50)
  updatedAt      DateTime? @db.Timestamp(0)
  updatedBy      String?   @db.VarChar(50)
  User           User      @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "RatingReply_ibfk_2")
  Rating         Rating    @relation(fields: [parentRatingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "RatingReply_ibfk_3")

  @@index([createdBy], map: "createdBy")
  @@index([parentRatingId], map: "parentRatingId")
}

model Store {
  id                                           String           @id @db.VarChar(50)
  name                                         String           @db.VarChar(255)
  image                                        String           @db.VarChar(255)
  location                                     String?          @db.VarChar(100)
  description                                  String?          @db.VarChar(1000)
  status                                       String           @db.VarChar(10)
  createdBy                                    String           @db.VarChar(50)
  updatedBy                                    String?          @db.VarChar(50)
  createdAt                                    DateTime?        @default(now()) @db.Timestamp(0)
  updatedAt                                    DateTime?        @db.Timestamp(0)
  Order                                        Order[]
  Product                                      Product[]
  Rating                                       Rating[]
  User_Store_createdByToUser                   User             @relation("Store_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Store_ibfk_1")
  User_Store_updatedByToUser                   User?            @relation("Store_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Store_ibfk_2")
  StorePromotion_StorePromotion_storeIdToStore StorePromotion[] @relation("StorePromotion_storeIdToStore")
  StoreRole                                    StoreRole[]
  Voucher                                      Voucher[]

  @@index([createdBy], map: "createdBy")
  @@index([updatedBy], map: "updatedBy")
}

model StoreRole {
  id                             String    @id @db.VarChar(50)
  storeId                        String    @db.VarChar(50)
  status                         String    @db.VarChar(10)
  role                           String    @db.VarChar(20)
  createdBy                      String    @db.VarChar(50)
  updatedBy                      String?   @db.VarChar(50)
  createdAt                      DateTime? @default(now()) @db.Timestamp(0)
  updatedAt                      DateTime? @db.Timestamp(0)
  Account                        Account[]
  Store                          Store     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_1")
  User_StoreRole_createdByToUser User      @relation("StoreRole_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_2")
  User_StoreRole_updatedByToUser User?     @relation("StoreRole_updatedByToUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StoreRole_ibfk_3")

  @@index([createdBy], map: "createdBy")
  @@index([storeId], map: "storeId")
  @@index([updatedBy], map: "updatedBy")
}

model User {
  id                                  String                     @id @db.VarChar(50)
  image                               String?                    @db.Text
  full_name                           String                     @db.VarChar(100)
  birthday                            DateTime?                  @db.Timestamp(0)
  email                               String                     @db.VarChar(255)
  address                             String?                    @db.Text
  rankId                              String?                    @db.VarChar(50)
  role                                String                     @db.VarChar(20)
  status                              String                     @db.VarChar(10)
  createdAt                           DateTime?                  @default(now()) @db.Timestamp(0)
  updatedAt                           DateTime?                  @db.Timestamp(0)
  Account_Account_userIdToUser        Account[]                  @relation("Account_userIdToUser")
  Account_Account_createdByToUser     Account[]                  @relation("Account_createdByToUser")
  Account_Account_updatedByToUser     Account[]                  @relation("Account_updatedByToUser")
  CategoryConditionVoucher            CategoryConditionVoucher[]
  DeliveryInformation                 DeliveryInformation[]
  Order                               Order[]
  OrderRefund                         OrderRefund[]
  OrderShipping                       OrderShipping[]
  PriceConditionVoucher               PriceConditionVoucher[]
  Product_Product_createdByToUser     Product[]                  @relation("Product_createdByToUser")
  Product_Product_updatedByToUser     Product[]                  @relation("Product_updatedByToUser")
  Product_Product_deletedByToUser     Product[]                  @relation("Product_deletedByToUser")
  ProductImage                        ProductImage[]
  ProductPromotion                    ProductPromotion[]
  Rating                              Rating[]
  RatingReply                         RatingReply[]
  Store_Store_createdByToUser         Store[]                    @relation("Store_createdByToUser")
  Store_Store_updatedByToUser         Store[]                    @relation("Store_updatedByToUser")
  StorePromotion                      StorePromotion[]
  StoreRole_StoreRole_createdByToUser StoreRole[]                @relation("StoreRole_createdByToUser")
  StoreRole_StoreRole_updatedByToUser StoreRole[]                @relation("StoreRole_updatedByToUser")
  UserVoucher                         UserVoucher[]
}

model UserAddProductToCart {
  id        String    @id @db.VarChar(50)
  userId    String?   @db.VarChar(50)
  productId String    @db.VarChar(50)
  quantity  Int
  createdAt DateTime  @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  isDelete  Int?      @db.TinyInt
  Product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserAddProductToCart_ibfk_2")

  @@index([productId], map: "productId")
  @@index([userId], map: "userId")
}

model UserScore {
  userId    String    @db.VarChar(50)
  storeId   String    @db.VarChar(50)
  quantity  Int?
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)

  @@id([userId, storeId])
}

model UserViewProduct {
  id        String   @id @db.VarChar(50)
  userId    String?  @db.VarChar(50)
  productId String   @db.VarChar(50)
  createdAt DateTime @db.Timestamp(0)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserViewProduct_ibfk_2")

  @@index([productId], map: "productId")
  @@index([userId], map: "userId")
}

model Voucher {
  id                       String                    @id @db.VarChar(50)
  code                     String                    @db.VarChar(100)
  title                    String                    @db.VarChar(255)
  description              String?                   @db.Text
  initQuantity             Int
  currentQuantity          Int
  status                   String                    @db.VarChar(20)
  type                     String                    @db.VarChar(20)
  storeId                  String?                   @db.VarChar(50)
  percent                  Float?
  maximum                  Int?
  startDate                DateTime                  @db.Timestamp(0)
  endDate                  DateTime?                 @db.Timestamp(0)
  createdBy                String                    @db.VarChar(50)
  createdAt                DateTime                  @default(now()) @db.Timestamp(0)
  updatedBy                String?                   @db.VarChar(50)
  updatedAt                DateTime?                 @db.Timestamp(0)
  categoryConditionId      String?                   @db.VarChar(50)
  priceConditionId         String?                   @db.VarChar(50)
  OrderVoucher             OrderVoucher[]
  Product                  Product[]
  UserVoucher              UserVoucher[]
  Store                    Store?                    @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_ibfk_1")
  CategoryConditionVoucher CategoryConditionVoucher? @relation(fields: [categoryConditionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_ibfk_2")
  PriceConditionVoucher    PriceConditionVoucher?    @relation(fields: [priceConditionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_ibfk_3")

  @@index([categoryConditionId], map: "categoryConditionId")
  @@index([priceConditionId], map: "priceConditionId")
  @@index([storeId], map: "storeId")
}

model UserVoucher {
  id        String    @id @db.VarChar(50)
  userId    String    @db.VarChar(50)
  voucherId String    @db.VarChar(50)
  isUsed    Int
  createdAt DateTime  @db.Timestamp(0)
  createdBy String    @db.VarChar(50)
  updatedAt DateTime? @db.Timestamp(0)
  updatedBy String?   @db.VarChar(50)
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserVoucher_ibfk_1")
  Voucher   Voucher   @relation(fields: [voucherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserVoucher_ibfk_2")

  @@index([userId], map: "userId")
  @@index([voucherId], map: "voucherId")
}

model SalePromotion {
  id                                                   String           @id @db.VarChar(50)
  title                                                String           @db.TinyText
  description                                          String?          @db.Text
  type                                                 String           @db.VarChar(50)
  categoryId                                           String?          @db.VarChar(50)
  status                                               String           @db.VarChar(50)
  startDate                                            DateTime         @db.Timestamp(0)
  endDate                                              DateTime?        @db.Timestamp(0)
  createdAt                                            DateTime         @db.Timestamp(0)
  createdBy                                            String           @db.VarChar(50)
  updatedAt                                            DateTime?        @db.Timestamp(0)
  updatedBy                                            String?          @db.VarChar(50)
  StorePromotion_StorePromotion_salePromotionIdToStore StorePromotion[] @relation("StorePromotion_salePromotionIdToStore")
}

model ProductPromotion {
  id               String         @id @db.VarChar(50)
  productId        String         @db.VarChar(50)
  name             String         @db.VarChar(1000)
  image            String         @db.VarChar(500)
  quantity         Int
  bought           Int?           @default(0)
  priceAfter       Float          @db.Float
  isDelete         Boolean        @default(false)
  createdAt        DateTime       @db.Timestamp(0)
  createdBy        String         @db.VarChar(50)
  updatedAt        DateTime?      @db.Timestamp(0)
  updatedBy        String?        @db.VarChar(50)
  storePromotionId String         @db.VarChar(50)
  salePromotionId  String         @db.VarChar(50)
  Product          Product        @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductPromotion_ibfk_2")
  User             User           @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductPromotion_ibfk_3")
  StorePromotion   StorePromotion @relation(fields: [storePromotionId], references: [id], onUpdate: Restrict, map: "ProductPromotion_ibfk_4")

  @@index([createdBy], map: "createdBy")
  @@index([productId], map: "productId")
  @@index([storePromotionId], map: "salePromotionId")
}

model StorePromotion {
  id                                          String             @id @db.VarChar(50)
  salePromotionId                             String             @db.VarChar(50)
  storeId                                     String             @db.VarChar(50)
  status                                      String             @db.VarChar(50)
  createdAt                                   DateTime           @db.Timestamp(0)
  createdBy                                   String             @db.VarChar(50)
  updatedAt                                   DateTime?          @db.Timestamp(0)
  updatedBy                                   String?            @db.VarChar(50)
  ProductPromotion                            ProductPromotion[]
  Store_StorePromotion_storeIdToStore         Store              @relation("StorePromotion_storeIdToStore", fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StorePromotion_ibfk_1")
  Store_StorePromotion_salePromotionIdToStore SalePromotion      @relation("StorePromotion_salePromotionIdToStore", fields: [salePromotionId], references: [id], onUpdate: Restrict, map: "StorePromotion_ibfk_2")
  User                                        User               @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "StorePromotion_ibfk_3")

  @@index([createdBy], map: "createdBy")
  @@index([salePromotionId], map: "salePromotionId")
  @@index([storeId], map: "storeId")
}

model OrderVoucher {
  id        String   @id @db.VarChar(50)
  orderId   String   @db.VarChar(50)
  voucherId String   @db.VarChar(50)
  createdAt DateTime @db.Timestamp(0)
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "OrderVoucher_ibfk_1")
  Voucher   Voucher  @relation(fields: [voucherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "OrderVoucher_ibfk_2")

  @@index([orderId], map: "orderId")
  @@index([voucherId], map: "voucherId")
}

model StoreRating {
  id        String    @id @db.VarChar(50)
  storeId   String    @db.VarChar(50)
  one       Int       @default(0)
  two       Int       @default(0)
  three     Int       @default(0)
  four      Int       @default(0)
  five      Int       @default(0)
  total     Int       @default(0)
  average   Float     @default(0)
  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
}

model OrderRefund {
  id                 String               @id @db.VarChar(50)
  orderId            String               @db.VarChar(50)
  status             String               @db.VarChar(50)
  title              String               @db.VarChar(1000)
  description        String               @db.TinyText
  createdAt          DateTime?            @db.Timestamp(0)
  createdBy          String               @db.VarChar(50)
  updatedAt          DateTime?            @db.Timestamp(0)
  updatedBy          String?              @db.VarChar(50)
  Order              Order                @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "OrderRefund_ibfk_1")
  User               User                 @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "OrderRefund_ibfk_2")
  ProductOrderRefund ProductOrderRefund[]
  RefundMaterial     RefundMaterial[]

  @@index([createdBy], map: "createdBy")
  @@index([orderId], map: "orderId")
}

model ProductOrderRefund {
  id             String       @id @db.VarChar(50)
  orderRefundId  String       @db.VarChar(50)
  productOrderId String       @db.VarChar(50)
  quantity       Int
  description    String?      @db.Text
  OrderRefund    OrderRefund  @relation(fields: [orderRefundId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductOrderRefund_ibfk_1")
  ProductOrder   ProductOrder @relation(fields: [productOrderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductOrderRefund_ibfk_2")

  @@index([orderRefundId], map: "orderRefundId")
  @@index([productOrderId], map: "productOrderId")
}

model RefundMaterial {
  id            String      @id @db.VarChar(50)
  orderRefundId String      @db.VarChar(50)
  url           String      @db.VarChar(500)
  type          String      @db.VarChar(50)
  description   String?     @db.TinyText
  OrderRefund   OrderRefund @relation(fields: [orderRefundId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "RefundMaterial_ibfk_1")

  @@index([orderRefundId], map: "orderRefundId")
}

model OrderShipping {
  id        String    @id @db.VarChar(50)
  orderId   String    @db.VarChar(50)
  name      String    @db.VarChar(100)
  address   String    @db.VarChar(1000)
  type      String    @db.VarChar(50)
  createdAt DateTime? @db.Timestamp(0)
  createdBy String    @db.VarChar(50)
  updatedAt DateTime? @db.Timestamp(0)
  Order     Order     @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "OrderShipping_ibfk_1")
  User      User      @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "OrderShipping_ibfk_2")

  @@index([createdBy], map: "createdBy")
  @@index([orderId], map: "orderId")
}
